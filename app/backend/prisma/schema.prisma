// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:../../db/pong.db"
}

model User {
    id         Int      @id @default(autoincrement())
    username   String   @unique
    email      String?  @unique
    avatar     String? // Store the file path or URL
    dateJoined DateTime @default(now())

    authentication    Authentication?
    stats             UserStats?
    accountStatus     AccountStatus?
    friends           Friends[]       @relation("fk_User_UserID")
    friendsOf         Friends[]       @relation("fk_User_FriendID")
    matchesAsPlayer1  Match[]         @relation("Player1")
    matchesAsPlayer2  Match[]         @relation("Player2")
    tournament      Tournament[]

    @@map("users") // Maps to users table in the database
}

model Authentication {
    userId   Int     @id
    password String?
    // has2FA        Boolean @default(false)
    // totpSecret    String?
    // oauthProvider String?
    // emailVerificationToken String?
    // emailVerified          Boolean @default(false)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("authentications")
}

model UserStats {
    userId        Int   @id
    matchesPlayed Int   @default(0)
    matchesWon    Int   @default(0)
    matchesLost   Int   @default(0)
    winRate       Float @default(0.0)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_stats")
}

model AccountStatus {
    userId       Int      @id
    // lastLogin      DateTime?
    lastActivity DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("account_status")
}

model Friends {
    userId   Int
    friendId Int

    user   User @relation("fk_User_UserID", fields: [userId], references: [id], onDelete: Cascade)
    friend User @relation("fk_User_FriendID", fields: [friendId], references: [id], onDelete: Cascade)

    @@id([userId, friendId]) // Composite primary key for many-to-many relationship
    @@map("friends")
}

model Match {
    id               Int      @id @default(autoincrement())
    player1Id        Int?
    player2Id        Int?
    player1Nickname  String
    player2Nickname  String
    player1Score     Int
    player2Score     Int
    tournamentId     Int?
    date             DateTime @default(now())
    // status           MatchStatus @default(NOT_PLAYED)

    player1     User?      @relation("Player1", fields: [player1Id], references: [id], onDelete: Cascade)
    player2     User?      @relation("Player2", fields: [player2Id], references: [id], onDelete: Cascade)
    tournament Tournament? @relation(fields: [tournamentId], references: [id])

    @@map("matches")
}

model Tournament {
    id         Int              @id @default(autoincrement())
    name       String
    maxPlayers Int              @default(4)
    isPrivate  Boolean          @default(false)
    status     TournamentStatus @default(CREATED)
    adminId    Int
    bracket    Json

    admin   User    @relation(fields: [adminId], references: [id], onDelete: Cascade)
    matches Match[]

    @@map("tournaments")
}

// enum MatchStatus {
//     NOT_PLAYED
//     IN_PROGRESS
//     FINISHED
// }

enum TournamentStatus {
    CREATED
    IN_PROGRESS
    FINISHED
}
