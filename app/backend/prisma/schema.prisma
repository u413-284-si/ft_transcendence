// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:../../db/pong.db"
}

model User {
    id         Int      @id @default(autoincrement())
    username   String   @unique
    email      String?  @unique
    avatar     String?
    language   Language @default(en)
    dateJoined DateTime @default(now())

    authentication   Authentication?
    stats            UserStats?
    accountStatus    AccountStatus?
    sentRequests     FriendRequest[] @relation("SentRequests")
    receivedRequests FriendRequest[] @relation("ReceivedRequests")
    matchesPlayed    Match[]         @relation("UserPlayed")
    tournament       Tournament[]

    @@map("users") // Maps to users table in the database
}

model Authentication {
    userId   Int     @id
    password String?
	refreshToken String?
	authProvider AuthProviderType @default(LOCAL)
    totpSecret    String?
    has2FA        Boolean @default(false)
	backupCodes BackupCode[] @relation("BackupCodes")
    // oauthProvider String?
    // emailVerificationToken String?
    // emailVerified          Boolean @default(false)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("authentications")
}

model BackupCode {
	id			Int @id @default(autoincrement())
	userId 		Int
	backupCode	String?

	authentication Authentication @relation("BackupCodes", fields: [userId], references: [userId], onDelete: Cascade)
}

model UserStats {
    userId        Int @id
    matchesPlayed Int @default(0)
    matchesWon    Int @default(0)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_stats")
}

model AccountStatus {
    userId       Int      @id
    // lastLogin      DateTime?
    lastActivity DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("account_status")
}

model FriendRequest {
    id         Int                 @id @default(autoincrement())
    senderId   Int
    receiverId Int
    status     FriendRequestStatus @default(PENDING)

    sender   User @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
    receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("friend_requests")
}

model Match {
    id              Int      @id @default(autoincrement())
    userId          Int
    playedAs        PlayedAs @default(PLAYERONE)
    player1Nickname String
    player2Nickname String
    player1Score    Int
    player2Score    Int
    tournamentId    Int?
    date            DateTime @default(now())

    user       User        @relation("UserPlayed", fields: [userId], references: [id], onDelete: Cascade)
    tournament Tournament? @relation(fields: [tournamentId], references: [id])

    @@map("matches")
}

model Tournament {
    id           Int      @id @default(autoincrement())
    name         String
    maxPlayers   Int      @default(4)
    isPrivate    Boolean  @default(false)
    isFinished   Boolean  @default(false)
    userId       Int
    userNickname String   @default("Mister Bombastic")
    bracket      Json
    roundReached Int      @default(1)
    updatedAt    DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    matches Match[]

    @@map("tournaments")
}

enum PlayedAs {
    NONE
    PLAYERONE
    PLAYERTWO
}

enum FriendRequestStatus {
    PENDING
    ACCEPTED
}

enum AuthProviderType {
    LOCAL
    GOOGLE
}

enum Language {
    en
    fr
    de
    pi
    tr
}
