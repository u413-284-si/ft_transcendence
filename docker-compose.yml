services:
  app:
    build:
      dockerfile: ./app/Dockerfile
    container_name: app
    init: true
    security_opt:
      - no-new-privileges:true
    environment:
      NODE_ENV: production
      PORT: 4001
    secrets:
      - vault_ca
    restart: always
    volumes:
      - db-data:/app/db
      - vault-secrets:/app/secrets
    depends_on:
      vault:
        condition: service_healthy
    networks:
      - pong-network

  waf:
    build:
      dockerfile: ./waf/Dockerfile
    container_name: waf
    init: true
    security_opt:
      - no-new-privileges:true
    ports:
      - "8080:8080"
      - "8443:8443"
    restart: always
    environment:
      # nginx settings
      BACKEND: http://app:4001
      PORT: 8080
      SSL_PORT: 8443
      NGINX_ALWAYS_TLS_REDIRECT: on
      SSL_CERT: /etc/nginx/certs/fullchain.pem
      SSL_CERT_KEY: /etc/nginx/certs/key.pem
      # modsecurity settings
      MODSEC_RULE_ENGINE: On
      MODSEC_DEBUG_LOGLEVEL: 3 # errors, warnings, and notices
      # CRS settings
      BLOCKING_PARANOIA: 2
    volumes:
      - certs:/etc/nginx/certs:ro
    depends_on:
      app:
        condition: service_started
      vault-agent:
        condition: service_healthy
    networks:
      - pong-network

  vault:
    build:
      dockerfile: ./vault/Dockerfile
    container_name: vault
    init: true
    security_opt:
      - no-new-privileges:true
    ports:
      - "8200:8200"
    environment:
      - VAULT_ADDR=https://vault:8200
      - VAULT_CACERT=/run/secrets/vault_ca
    secrets:
      - google_secret
      - vault_cert
      - vault_key
      - vault_ca
    configs:
      - source: vault_config
        target: /vault/config/vault.hcl
      - source: policy_app
        target: /vault/policies/app-policy.hcl
      - source: policy_nginx
        target: /vault/policies/nginx-policy.hcl
    restart: always
    volumes:
      - vault-data:/vault/data
      - vault-secrets:/vault/secrets
    networks:
      - pong-network
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 5s
      timeout: 2s
      retries: 10

  vault-agent:
    image: hashicorp/vault:1.20.2
    container_name: vault-agent
    environment:
      VAULT_ADDR: "https://vault:8200"
    secrets:
      - vault_ca
    configs:
      - source: vault_agent_config
        target: /vault/config/agent.hcl
      - source: template_cert
        target: /vault/templates/cert.ctmpl
      - source: template_key
        target: /vault/templates/key.ctmpl
    restart: always
    volumes:
      - vault-secrets:/vault/secrets
      - certs:/vault/certs
    command: sh -c "
      chown -R vault:vault /vault/secrets /vault/certs &&
      exec su-exec vault:vault vault agent -config=/vault/config/agent.hcl
      "
    depends_on:
      vault:
        condition: service_healthy
    networks:
      - pong-network
    healthcheck:
      test: ["CMD", "test", "-f", "/vault/certs/fullchain.pem"]
      interval: 5s
      timeout: 2s
      retries: 10

networks:
  pong-network:

volumes:
  certs:
  db-data:
  vault-data:
  vault-secrets:

secrets:
  google_secret:
    file: ./secrets/google-secret.txt
  vault_cert:
    file: ./secrets/vault-certs/vault.crt
  vault_key:
    file: ./secrets/vault-certs/vault.key
  vault_ca:
    file: ./secrets/vault-certs/root-ca.crt

configs:
  vault_config:
    file: ./vault/config/vault.hcl
  policy_app:
    file: ./vault/policies/app-policy.hcl
  policy_nginx:
    file: ./vault/policies/nginx-policy.hcl
  vault_agent_config:
    file: ./vault-agent/config/agent.hcl
  template_cert:
    file: ./vault-agent/templates/cert.ctmpl
  template_key:
    file: ./vault-agent/templates/key.ctmpl
